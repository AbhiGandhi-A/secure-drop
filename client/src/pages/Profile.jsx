"use client"

import { useAuth } from "../context/AuthContext.jsx"
import api from "../api/client.js"
import { notify } from "../components/Notifications.jsx"

function loadRazorpay() {
Â  return new Promise((resolve) => {
Â  Â  if (window.Razorpay) return resolve(true)
Â  Â  const script = document.createElement("script")
Â  Â  script.src = "https://checkout.razorpay.com/v1/checkout.js"
Â  Â  script.onload = () => resolve(true)
Â  Â  script.onerror = () => resolve(false)
Â  Â  document.body.appendChild(script)
Â  })
}

// ðŸš¨ NEW HELPER: Translates internal DB plan names to display names
function formatPlan(plan) {
  if (plan === "PREMIUM_MONTHLY") return "Premium Monthly"
  if (plan === "PREMIUM_YEARLY") return "Premium Yearly"
  return plan || "FREE"
}


export default function Profile() {
Â  const { user, setUser } = useAuth()

Â  const subscribe = async (plan) => {
Â  Â  try {
Â  Â  Â  const loaded = await loadRazorpay()
Â  Â  Â  if (!loaded) {
Â  Â  Â  Â  notify("Failed to load Razorpay", "error")
Â  Â  Â  Â  return
Â  Â  Â  }

Â  Â  Â  const { data } = await api.post("/api/billing/create-order", { plan })
Â  Â  Â  const { keyId, orderId, amount, currency } = data || {}

Â  Â  Â  if (!keyId || !orderId) {
Â  Â  Â  Â  notify("Billing not configured", "error")
Â  Â  Â  Â  return
Â  Â  Â  }

Â  Â  Â  const options = {
Â  Â  Â  Â  key: keyId,
Â  Â  Â  Â  amount,
Â  Â  Â  Â  currency,
Â  Â  Â  Â  name: "Secure Drop",
Â  Â  Â  Â  description: `Premium (${plan})`,
Â  Â  Â  Â  order_id: orderId,
Â  Â  Â  Â  prefill: { name: user?.name, email: user?.email },
Â  Â  Â  Â  theme: { color: "#0ea5e9" },
Â  Â  Â  Â  handler: async (response) => {
Â  Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  const confirm = await api.post("/api/billing/confirm", {
Â  Â  Â  Â  Â  Â  Â  razorpay_order_id: response.razorpay_order_id,
Â  Â  Â  Â  Â  Â  Â  razorpay_payment_id: response.razorpay_payment_id,
Â  Â  Â  Â  Â  Â  Â  razorpay_signature: response.razorpay_signature,
Â  Â  Â  Â  Â  Â  Â  plan,
Â  Â  Â  Â  Â  Â  })

Â  Â  Â  Â  Â  Â  // ðŸš¨ FRONT-END PLAN UPDATE: Must match the internal plan code (PREMIUM_MONTHLY/YEARLY)
Â  Â  Â  Â  Â  Â  const newPlan = plan === "monthly" ? "PREMIUM_MONTHLY" : "PREMIUM_YEARLY"
Â  Â  Â  Â  Â  Â  setUser((prev) => prev ? { ...prev, plan: newPlan } : prev)
Â  Â  Â  Â  Â  Â  notify("Subscription activated!", "success")
Â  Â  Â  Â  Â  } catch {
Â  Â  Â  Â  Â  Â  notify("Payment verification failed", "error")
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  },
Â  Â  Â  Â  modal: {
Â  Â  Â  Â  Â  ondismiss: () => {
Â  Â  Â  Â  Â  Â  notify("Payment cancelled", "info")
Â  Â  Â  Â  Â  },
Â  Â  Â  Â  },
Â  Â  Â  }

Â  Â  Â  const rzp = new window.Razorpay(options)
Â  Â  Â  rzp.open()
Â  Â  } catch (e) {
Â  Â  Â  notify("Failed to create order or billing not configured", "error")
Â  Â  }
Â  }

Â  if (!user) return <div className="card narrow">Login to manage your account.</div>

Â  return (
Â  Â  <div className="card narrow">
Â  Â  Â  <h2>Profile</h2>
Â  Â  Â  <div>
Â  Â  Â  Â  <strong>Name:</strong> {user.name}
Â  Â  Â  </div>
Â  Â  Â  <div>
Â  Â  Â  Â  <strong>Email:</strong> {user.email}
Â  Â  Â  </div>
Â  Â  Â  <div>
Â  Â  Â  Â  <strong>Plan:</strong> {formatPlan(user.plan)} {/* ðŸš¨ Use helper function for display */}
Â  Â  Â  </div>

Â  Â  Â  <h3>Upgrade</h3>
Â  Â  Â  <div className="row">
Â  Â  Â  Â  <button className="btn-primary" onClick={() => subscribe("monthly")}>
Â  Â  Â  Â  Â  Go Premium (Monthly)
Â  Â  Â  Â  </button>
Â  Â  Â  Â  <button className="btn-outline" onClick={() => subscribe("yearly")}>
Â  Â  Â  Â  Â  Go Premium (Yearly)
Â  Â  Â  Â  </button>
Â  Â  Â  </div>

Â  Â  Â  <div className="muted">Premium: larger files, longer expiry, no ads.</div>
Â  Â  </div>
Â  )
}