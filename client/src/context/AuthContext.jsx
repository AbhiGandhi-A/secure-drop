"use client"

import { createContext, useContext, useEffect, useState } from "react"
// ðŸš¨ Ensure this import path is correct
import api, { setAuthToken } from "../api/client.js" 

const AuthContext = createContext(null)

export function AuthProvider({ children }) {
Â  const [user, setUser] = useState(() => {
Â  Â  try {
Â  Â  Â  // Reads 'user' key
Â  Â  Â  const cached = localStorage.getItem("user")
Â  Â  Â  return cached ? JSON.parse(cached) : null
Â  Â  } catch {
Â  Â  Â  return null
Â  Â  }
Â  })
Â  // Reads 'token' key
Â  const [token, setToken] = useState(localStorage.getItem("token") || null)
Â  const [loginAt, setLoginAt] = useState(Number(localStorage.getItem("loginAt") || 0))

Â  useEffect(() => {
Â  Â  // ðŸš¨ This call sets the header on the Axios instance
Â  Â  setAuthToken(token) 
Â  Â  if (!token) setUser(null)

Â  Â  let timer
Â  Â  if (token && loginAt) {
Â  Â  Â  const elapsed = Date.now() - loginAt
Â  Â  Â  const remaining = Math.max(0, 60 * 60 * 1000 - elapsed)
Â  Â  Â  timer = setTimeout(() => {
Â  Â  Â  Â  logout()
Â  Â  Â  }, remaining)
Â  Â  }
Â  Â  return () => timer && clearTimeout(timer)
Â  }, [token, loginAt])

Â  useEffect(() => {
Â  Â  try {
Â  Â  Â  if (user) localStorage.setItem("user", JSON.stringify(user))
Â  Â  Â  else localStorage.removeItem("user")
Â  Â  } catch {}
Â  }, [user])

Â  const login = async (email, password) => {
Â  Â  try {
Â  Â  Â  // ðŸš¨ This is the correct API call
Â  Â  Â  const { data } = await api.post("/api/auth/login", { email, password })
Â  Â  Â  
Â  Â  Â  localStorage.setItem("token", data.token)
Â  Â  Â  localStorage.setItem("loginAt", String(Date.now()))
Â  Â  Â  localStorage.setItem("user", JSON.stringify(data.user))
Â  Â  Â  setToken(data.token)
Â  Â  Â  setLoginAt(Date.now())
Â  Â  Â  setUser(data.user)
Â  Â  Â  
Â  Â  Â  return data; // Return data for external handling (like in the Login component)
Â  Â  } catch (error) {
Â  Â  Â  // Re-throw error so the Login component can catch it and display a notification
Â  Â  Â  throw error; 
Â  Â  }
Â  }

Â  const register = async (name, email, password) => {
Â  Â  const { data } = await api.post("/api/auth/register", { name, email, password })
Â  Â  localStorage.setItem("token", data.token)
Â  Â  localStorage.setItem("loginAt", String(Date.now()))
Â  Â  localStorage.setItem("user", JSON.stringify(data.user))
Â  Â  setToken(data.token)
Â  Â  setLoginAt(Date.now())
Â  Â  setUser(data.user)
Â  }

Â  const logout = () => {
Â  Â  localStorage.removeItem("token")
Â  Â  localStorage.removeItem("loginAt")
Â  Â  localStorage.removeItem("user")
Â  Â  setToken(null)
Â  Â  setLoginAt(0)
Â  Â  setUser(null)
Â  }

Â  return (
Â  Â  <AuthContext.Provider value={{ user, setUser, token, login, register, logout }}>
Â  Â  Â  {children}
Â  Â  </AuthContext.Provider>
Â  )
}

export function useAuth() {
Â  return useContext(AuthContext)
}