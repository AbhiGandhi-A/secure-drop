// Centralized environment configuration with defaults and type coercion
require("dotenv").config()

const toInt = (v, d) => {
Â  const n = Number.parseInt(v, 10)
Â  return Number.isFinite(n) ? n : d
}

const toBool = (v, d = false) => {
Â  if (v === undefined) return d
Â  return String(v).toLowerCase() === "true"
}

// Byte conversion helper
const MB = 1024 * 1024;

module.exports = {
Â  // Server config
Â  port: toInt(process.env.PORT, 8080),
Â  nodeEnv: process.env.NODE_ENV || "development",
Â  jwtSecret: process.env.JWT_SECRET || "change-me",
Â  corsOrigin: process.env.CORS_ORIGIN || "*",

Â  // MongoDB
Â  mongoUri: process.env.MONGODB_URI || "mongodb://localhost:27017/secure-drop",

Â  // Storage
Â  storageDriver: process.env.STORAGE_DRIVER || "local",
Â  uploadDir: process.env.UPLOAD_DIR || "uploads",

Â  // FILE SIZE LIMITS (bytes)
Â  limits: {
Â  Â  anonMaxBytes: toInt(process.env.ANON_MAX_FILE_BYTES, 5 * MB), Â  Â  Â  Â  Â // 5 MB (Guest/Anon)
Â  Â  freeMaxBytes: toInt(process.env.FREE_MAX_FILE_BYTES, 100 * MB), Â  Â  Â  Â  // 100 MB (Logged in, FREE plan)
Â  Â  premiumMaxBytes: toInt(process.env.PREMIUM_MAX_FILE_BYTES, 200 * MB) Â  // 200 MB (PREMIUM plans)
Â  },

Â  // ðŸš¨ UPDATED EXPIRY TIMES (hours)
Â  expiry: {
Â  Â  anonMaxHours: toInt(process.env.ANON_MAX_EXPIRE_HOURS, 6),
Â  Â  freeMaxHours: toInt(process.env.FREE_MAX_EXPIRE_HOURS, 24),
Â  Â  // Premium Monthly: 1 week (7 * 24 = 168 hours)
Â  Â  premiumMonthlyMaxHours: toInt(process.env.PREMIUM_MONTHLY_MAX_EXPIRE_HOURS, 168), 
Â  Â  // Premium Yearly: 2 weeks (14 * 24 = 336 hours)
Â  Â  premiumYearlyMaxHours: toInt(process.env.PREMIUM_YEARLY_MAX_EXPIRE_HOURS, 336), 
Â  },

Â  // ðŸš¨ NEW MAX DOWNLOADS CONFIGURATION
Â  maxDownloads: {
Â  Â  anon: toInt(process.env.ANON_MAX_DOWNLOADS, 3),
Â  Â  free: toInt(process.env.FREE_MAX_DOWNLOADS, 5),
Â  Â  monthly: toInt(process.env.PREMIUM_MONTHLY_MAX_DOWNLOADS, 20),
Â  Â  yearly: toInt(process.env.PREMIUM_YEARLY_MAX_DOWNLOADS, 99999), // Use a large number for "unlimited"
Â  },

Â  // Virus scanning
Â  virusScanEnabled: toBool(process.env.VIRUS_SCAN_ENABLED, false),

Â  // OpenAI
Â  openaiApiKey: process.env.OPENAI_API_KEY || "",

Â  // Razorpay config
Â  razorpay: {
Â  Â  keyId: process.env.RAZORPAY_KEY_ID || "",
Â  Â  keySecret: process.env.RAZORPAY_KEY_SECRET || "",
Â  Â  priceMonthly: toInt(process.env.RAZORPAY_PRICE_MONTHLY, 50000), 
Â  Â  priceYearly: toInt(process.env.RAZORPAY_PRICE_YEARLY, 500000) Â  
Â  },

Â  // AWS S3 (optional)
Â  s3: {
Â  Â  region: process.env.AWS_REGION || "",
Â  Â  bucket: process.env.S3_BUCKET_NAME || ""
Â  }
}