const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const { validationResult } = require("express-validator");
const User = require("../models/User");
const { jwtSecret } = require("../config/env");

function signToken(user) {
Â  // ðŸš¨ Ensure the plan value here is the Mongoose Schema enum (e.g., PREMIUM_MONTHLY)
Â  return jwt.sign(
Â  Â  { sub: user._id.toString(), plan: user.subscriptionPlan }, 
Â  Â  jwtSecret,
Â  Â  { expiresIn: "1h" }
Â  );
}

async function register(req, res, next) {
Â  try {
Â  Â  // Validate input
Â  Â  const errors = validationResult(req);
Â  Â  if (!errors.isEmpty()) {
Â  Â  Â  return res.status(400).json({ error: "Invalid input", details: errors.array() });
Â  Â  }

Â  Â  const { name, email, password } = req.body;

Â  Â  if (!name || !email || !password) {
Â  Â  Â  return res.status(400).json({ error: "All fields are required" });
Â  Â  }

Â  Â  const existing = await User.findOne({ email });
Â  Â  if (existing) return res.status(400).json({ error: "Email already registered" });

Â  Â  const passwordHash = await bcrypt.hash(password, 12);
Â  Â  const user = await User.create({
Â  Â  Â  name,
Â  Â  Â  email,
Â  Â  Â  passwordHash,
Â  Â  Â  subscriptionPlan: "FREE",
Â  Â  });

Â  Â  const token = signToken(user);

Â  Â  res.status(201).json({
Â  Â  Â  message: "Registration successful",
Â  Â  Â  token,
Â  Â  Â  user: {
Â  Â  Â  Â  id: user._id,
Â  Â  Â  Â  name: user.name,
Â  Â  Â  Â  email: user.email,
Â  Â  Â  Â  plan: user.subscriptionPlan,
Â  Â  Â  },
Â  Â  });
Â  } catch (e) {
Â  Â  console.error("[register] error:", e);
Â  Â  next(e);
Â  }
}

async function login(req, res, next) {
Â  try {
Â  Â  const errors = validationResult(req);
Â  Â  if (!errors.isEmpty()) {
Â  Â  Â  return res.status(400).json({ error: "Invalid input", details: errors.array() });
Â  Â  }

Â  Â  const { email, password } = req.body;
Â  Â  if (!email || !password) {
Â  Â  Â  return res.status(400).json({ error: "Email and password required" });
Â  Â  }

Â  Â  const user = await User.findOne({ email });
Â  Â  if (!user) return res.status(401).json({ error: "Invalid credentials" });

Â  Â  const ok = await bcrypt.compare(password, user.passwordHash);
Â  Â  if (!ok) return res.status(401).json({ error: "Invalid credentials" });

Â  Â  const token = signToken(user);

Â  Â  res.json({
Â  Â  Â  message: "Login successful",
Â  Â  Â  token,
Â  Â  Â  user: {
Â  Â  Â  Â  id: user._id,
Â  Â  Â  Â  name: user.name,
Â  Â  Â  Â  email: user.email,
Â  Â  Â  Â  plan: user.subscriptionPlan,
Â  Â  Â  },
Â  Â  });
Â  } catch (e) {
Â  Â  console.error("[login] error:", e);
Â  Â  next(e);
Â  }
}

module.exports = { register, login };