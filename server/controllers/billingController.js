const { razorpay: razorEnv } = require("../config/env")
const crypto = require("crypto")
const User = require("../models/User")

let razorpay = null
try {
Â  if (razorEnv.keyId && razorEnv.keySecret) {
Â  Â  const Razorpay = require("razorpay")
Â  Â  razorpay = new Razorpay({ key_id: razorEnv.keyId, key_secret: razorEnv.keySecret })
Â  }
} catch (e) {
Â  console.warn("[billing] Razorpay init failed:", e.message)
}

// Create order
async function createOrder(req, res) {
    // ðŸš¨ Ensure the user is authenticated early (requires authenticate middleware on route)
    if (!req.user?.id) {
        return res.status(401).json({ error: "Authentication required" })
    }
    
Â  Â  try {
Â  Â  Â  if (!razorpay) return res.status(501).json({ error: "Billing not configured" })

Â  Â  Â  const { plan = "monthly" } = req.body
Â  Â  Â  const amount = plan === "yearly" ? razorEnv.priceYearly : razorEnv.priceMonthly
Â  Â  Â  if (!amount) return res.status(400).json({ error: "Price not configured" })

Â  Â  Â  const order = await razorpay.orders.create({
Â  Â  Â  Â  amount, // in paise
Â  Â  Â  Â  currency: "INR",
Â  Â  Â  Â  receipt: `sub_${req.user.id}_${Date.now()}`, // Use req.user.id directly now
Â  Â  Â  Â  notes: { plan, userId: req.user.id }, // Best practice: explicitly pass userId
Â  Â  Â  })

Â  Â  Â  return res.json({
Â  Â  Â  Â  orderId: order.id,
Â  Â  Â  Â  amount: order.amount,
Â  Â  Â  Â  currency: order.currency,
Â  Â  Â  Â  keyId: razorEnv.keyId,
Â  Â  Â  Â  plan,
Â  Â  Â  })
Â  Â  } catch (e) {
Â  Â  Â  console.error("[billing] createOrder error:", e)
Â  Â  Â  return res.status(500).json({ error: "Failed to create order" })
Â  Â  }
}

// Confirm payment
async function confirmPayment(req, res) {
    // ðŸš¨ Ensure the user is authenticated early (requires authenticate middleware on route)
    if (!req.user?.id) {
        return res.status(401).json({ error: "Authentication required" }) // Better status code than 400
    }
    
Â  Â  try {
Â  Â  Â  const { razorpay_order_id, razorpay_payment_id, razorpay_signature, plan = "monthly" } = req.body
Â  Â  Â  if (!razorpay_order_id || !razorpay_payment_id || !razorpay_signature) {
Â  Â  Â  Â  return res.status(400).json({ error: "Missing payment fields" })
Â  Â  Â  }
Â  Â  
Â  Â  Â  // ðŸš¨ DEBUG LOGGING FOR SIGNATURE FAILURE ðŸš¨ (Confirmed OK by previous logs)
Â  Â  Â  console.log("--- Razorpay Signature Check Debug Info ---");
Â  Â  Â  console.log(`1. Secret Key used by server: ${razorEnv.keySecret ? 'Loaded' : 'NOT FOUND'}`);
Â  Â  Â  console.log(`2. Signature input string: ${razorpay_order_id}|${razorpay_payment_id}`);
Â  Â  Â  console.log(`3. Signature received from client: ${razorpay_signature}`);
Â  Â  Â  console.log("-------------------------------------------");


Â  Â  Â  // Concatenate the order ID and payment ID
Â  Â  Â  const expected = crypto
Â  Â  Â  Â  .createHmac("sha256", razorEnv.keySecret)
Â  Â  Â  Â  .update(`${razorpay_order_id}|${razorpay_payment_id}`)
Â  Â  Â  Â  .digest("hex")

Â  Â  Â  if (expected !== razorpay_signature) {
Â  Â  Â  Â  console.error("[billing] Signature Mismatch: Expected", expected, "Got", razorpay_signature);
Â  Â  Â  Â  return res.status(400).json({ error: "Signature verification failed" })
Â  Â  Â  }
Â  Â  
Â  Â  Â  // Log success before updating DB
Â  Â  Â  console.log("[billing] Signature verified successfully. Updating user plan.");


Â  Â  Â  // Update the user's subscription plan
Â  Â  Â  const newPlan = plan === "yearly" ? "PREMIUM_YEARLY" : "PREMIUM_MONTHLY" 

Â  Â  Â  const updatedUser = await User.findByIdAndUpdate(
Â  Â  Â  Â  req.user.id, // ID is guaranteed here by the check at the function start
Â  Â  Â  Â  { subscriptionPlan: newPlan }, 
Â  Â  Â  Â  { 
Â  Â  Â  Â  Â  new: true, 
Â  Â  Â  Â  Â  select: "name email subscriptionPlan _id" 
Â  Â  Â  Â  } 
Â  Â  Â  )
      
      if (!updatedUser) {
          console.error(`[billing] User ID ${req.user.id} not found for update.`);
          return res.status(404).json({ error: "User profile not found in database." });
      }

Â  Â  Â  const responseUser = {
Â  Â  Â  Â  id: updatedUser._id.toString(),
Â  Â  Â  Â  name: updatedUser.name,
Â  Â  Â  Â  email: updatedUser.email,
Â  Â  Â  Â  plan: updatedUser.subscriptionPlan, 
Â  Â  Â  }
Â  Â  Â  return res.json({ ok: true, user: responseUser })
Â  Â  
Â  Â  } catch (e) {
Â  Â  Â  console.error("[billing] confirmPayment error (Internal Server Error):", e)
Â  Â  Â  return res.status(500).json({ error: "Payment verification failed" })
Â  Â  }
}

module.exports = { createOrder, confirmPayment }
